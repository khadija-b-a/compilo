AUTHORS
-------

- Théo Barthélemy
- Khadija Ben Ayed

===============

Description of the project
--------------------------

The objective of this project is to develop a simple compiler capable of translating source code written in a high-level programming language into executable machine code.

===============

Git repository: https://github.com/khadija-b-a/compilo

===============

How to…
-------

Retrieve the sources?

  git clone https://github.com/khadija-b-a/compilo

Compile the project ?

  dune build

Execute and test the project ?

dune utop and then use the libraries
- for the questions before question 10, use :
    * (from project root) dune exec expr/main.exe -- expr/basic/tests/an_example.expr 
    * from question 10, dune exec expr/main.exe -- expr/fun/tests/an_example.expr

- To only test the Lexer, use : 
    * dune exec expr/main.exe -- pfx/basic/tests/ok_prog.pfx 
or 
    * dune exec expr/main.exe -- pfx/basic/tests/ok_prog1.pfx 

===============

Structure of the project
------------------------

The project is organized as following:

You may also show the file tree as the following example:

project
├── README
├── dune-project
├── expr: the expr compiler
│   ├── README
│   ├── basic
│   │   ├── ast.ml
│   │   ├── ast.mli
│   │   ├── dune
│   │   ├── eval.ml
│   │   ├── eval.mli
│   │   ├── lexer.mll
│   │   ├── parser.mly
│   │   ├── tests: for tests
│   │   │   └── an_example.expr 
│   │   │   └── an_example1.expr
│   │   ├── toPfx.ml            
│   │   └── toPfx.mli
│   ├── common
│   │   ├── binOp.ml
│   │   ├── binOp.mli
│   │   └── dune
│   ├── compiler.ml: main file for the expr compiler
│   ├── dune
│   ├── fun: 
│   │   ├── ast.ml
│   │   ├── ast.mli
│   │   ├── dune
│   │   ├── eval.ml
│   │   ├── eval.mli
│   │   ├── lexer.mll
│   │   └── parser.mly
│   │   ├── toPfx.ml            
│   │   └── toPfx.mli
│   └── main.ml
├── pfx: the pfx VM
│   ├── basic
│   │   ├── ast.ml               
│   │   ├── ast.mli
│   │   ├── dune
│   │   ├── eval.ml              
│   │   ├── eval.mli
│   │   ├── lexer.mll            
│   │   ├── parser.mly           
│   │   └── tests: for tests
│   │       └── ok_prog.pfx
│   │       └── ok_prog1.pfx
│   ├── fun
│   │   ├── ast.ml               
│   │   ├── ast.mli
│   │   ├── dune
│   │   ├── eval.ml              
│   │   ├── eval.mli
│   │   ├── lexer.mll            
│   │   ├── parser.mly           
│   │   └── tests: for tests
│   │       └── ok_prog.pfx
│   │       └── ok_prog1.pfx
│   └── pfxVM.ml: main file for the pfx VM
└── utils
    ├── dune
    ├── location.ml: module offering a data type for a location in a file
    └── location.mli
===============

Progress
--------

- We stopped the code at question 11.2 
- The code of the question 11.2 was not tested
- We stopped answering the questions at question 13.6

===============

Know bugs and issues
--------------------

- We were not able to manage question 13.3 and above
- conflicts in the code were observed at the question 11.2 

===============

Difficulties
------------

- team programming: having to use a VCS such as git and avoiding conflicts
- Only one of the members of the duo had a functional working environment because the author's computer was down, which made it more difficult to set up the organization.
- changing habits by using an unknown language

